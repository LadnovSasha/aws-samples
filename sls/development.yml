vpc: ""
DATABASE_URL:
  "Fn::Join":
  - ""
  -
    - "postgres://${opt:pg-user, 'developer'}:${opt:pg-password, 'developerSuperPWD'}@"
    - "Fn::GetAtt": [DBInstance, Endpoint.Address]
    - ":"
    - "Fn::GetAtt": [DBInstance, Endpoint.Port]
    - "/fitment"
alertNotifications: ""
endpointIsPrivate: false
Resources:
  S3BucketImport:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: ${self:provider.environment.BUCKET}
      MetricsConfigurations:
        - Id: EntireBucket
  FitmentImportQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "${self:service}-${opt:stage, self:provider.stage}-fitment-import"
      MessageRetentionPeriod: 86400
      VisibilityTimeout: 600
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt":
            - FitmentImportDeadLetterQueue
            - Arn
        maxReceiveCount: 5
  FitmentImportDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "${self:service}-${opt:stage, self:provider.stage}-fitment-import-deadletter"
      MessageRetentionPeriod: 1209600
  ImportFitmentsPermissionImportS3:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        "Fn::GetAtt":
          - ImportFitmentsLambdaFunction
          - Arn
      Principal: "s3.amazonaws.com"
      Action: "lambda:InvokeFunction"
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: "arn:aws:s3:::${self:provider.environment.BUCKET}"
  ImportDictionariesPermissionImportS3:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        "Fn::GetAtt":
          - ImportDictionariesLambdaFunction
          - Arn
      Principal: "s3.amazonaws.com"
      Action: "lambda:InvokeFunction"
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: "arn:aws:s3:::${self:provider.environment.BUCKET}"
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: ${self:provider.environment.DB_IDENTIFIER}
      MasterUsername: ${opt:pg-user, "developer"}
      MasterUserPassword: ${opt:pg-password, "developerSuperPWD"}
      DBName: fitment
      Engine: postgres
  requestBodyValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      Name: reqBodyValidator
      RestApiId:
        Ref: ApiGatewayRestApi
      ValidateRequestBody: true
      ValidateRequestParameters: false
  requestParametersValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      Name: reqParamsValidator
      RestApiId:
        Ref: ApiGatewayRestApi
      ValidateRequestBody: false
      ValidateRequestParameters: true
customDomain:
  enabled: false
