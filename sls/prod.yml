vpc:
    securityGroupIds:
        - ${opt:vpcSecurityGroup}
    subnetIds:
        "Fn::Split":
            - ","
            - ${opt:vpcSubnet}
DATABASE_URL:
  "Fn::Join":
  - ""
  -
    - "postgres://${opt:pg-user, 'developer'}:${opt:pg-password, 'developerSuperPWD'}@"
    - "Fn::GetAtt": [DBInstance, Endpoint.Address]
    - ":"
    - "Fn::GetAtt": [DBInstance, Endpoint.Port]
    - "/fitment"
alertNotifications: ${file(node_modules/lambda-core/sls/alarms.yml):prodAlertNotifications}
endpointIsPrivate: true
Resources:
  S3BucketImport:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: ${self:provider.environment.BUCKET}
      MetricsConfigurations:
        - Id: EntireBucket
  ImportFitmentsPermissionImportS3:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        "Fn::GetAtt":
          - ImportFitmentsLambdaFunction
          - Arn
      Principal: "s3.amazonaws.com"
      Action: "lambda:InvokeFunction"
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: "arn:aws:s3:::${self:provider.environment.BUCKET}"
  ImportDictionariesPermissionImportS3:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        "Fn::GetAtt":
          - ImportDictionariesLambdaFunction
          - Arn
      Principal: "s3.amazonaws.com"
      Action: "lambda:InvokeFunction"
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: "arn:aws:s3:::${self:provider.environment.BUCKET}"
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.medium
      DBInstanceIdentifier: ${self:provider.environment.DB_IDENTIFIER}
      MasterUsername: ${opt:pg-user}
      MasterUserPassword: ${opt:pg-password}
      DBName: fitment
      Engine: postgres
  FitmentImportQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "${self:service}-${opt:stage, self:provider.stage}-fitment-import"
      MessageRetentionPeriod: 86400
      VisibilityTimeout: 600
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt":
            - FitmentImportDeadLetterQueue
            - Arn
        maxReceiveCount: 5
  FitmentImportDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "${self:service}-${opt:stage, self:provider.stage}-fitment-import-deadletter"
      MessageRetentionPeriod: 1209600
  requestBodyValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      Name: reqBodyValidator
      RestApiId:
        Ref: ApiGatewayRestApi
      ValidateRequestBody: true
      ValidateRequestParameters: false
  requestParametersValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      Name: reqParamsValidator
      RestApiId:
        Ref: ApiGatewayRestApi
      ValidateRequestBody: false
      ValidateRequestParameters: true
  FitmentSizeLambdaNautilusUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    DependsOn: ApiGatewayUsagePlan
    Properties :
      KeyId: ${opt:nautilusBrowserApiKey}
      KeyType: API_KEY
      UsagePlanId:
        Ref: ApiGatewayUsagePlan

  SNSTopic: ${file(./sls/monitoring.yml):SNSTopic}

  ApiGateway4XXError: ${file(./sls/monitoring.yml):ApiGateway4XXError}
  ApiGateway5XXError: ${file(./sls/monitoring.yml):ApiGateway5XXError}
  ApiGatewayLatency: ${file(./sls/monitoring.yml):ApiGatewayLatency}

customDomain:
  domainName: api-gaas.goodyear.eu
  basePath: 'fitment'
  endpointType: regional
  certificateName: api-gaas.goodyear.eu
  hostedZoneId: Z1U9ULNL0V5AJ3
  stage: ${opt:stage, self:provider.stage}
  createRoute53Record: true
  enabled: true
