vpc: ""
alertNotifications: ""
endpointIsPrivate: true
Resources:
  S3BucketImport:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: ${self:provider.environment.BUCKET}
      MetricsConfigurations:
        - Id: EntireBucket
  ImportFitmentsPermissionImportS3:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        "Fn::GetAtt":
          - ImportFitmentsLambdaFunction
          - Arn
      Principal: "s3.amazonaws.com"
      Action: "lambda:InvokeFunction"
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: "arn:aws:s3:::${self:provider.environment.BUCKET}"
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: ${self:provider.environment.DB_IDENTIFIER}
      MasterUsername: ${opt:pg-user, "developer"}
      MasterUserPassword: ${opt:pg-password, "developerSuperPWD"}
      DBName: fitment
      Engine: postgres
  FitmentLambdaNautilusUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    DependsOn: ApiGatewayUsagePlan
    Properties :
      KeyId: ${opt:nautilusBrowserApiKey, 'm5vmux7nci'}
      KeyType: API_KEY
      UsagePlanId:
        Ref: ApiGatewayUsagePlan
  SNSTopic: ${file(./sls/monitoring.yml):SNSTopic}

  ApiGateway4XXError: ${file(./sls/monitoring.yml):ApiGateway4XXError}
  ApiGateway5XXError: ${file(./sls/monitoring.yml):ApiGateway5XXError}
  ApiGatewayLatency: ${file(./sls/monitoring.yml):ApiGatewayLatency}

customDomain:
  domainName: api-gaas-test.goodyear.eu
  basePath: fitment
  endpointType: regional
  certificateName: api-gaas-tst.goodyear.eu
  hostedZoneId: Z1U9ULNL0V5AJ3
  stage: '${opt:stage, self:provider.stage}'
  createRoute53Record: true
  enabled: true
