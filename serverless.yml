service: fitment-lambda
provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  stage: stage
  timeout: 20
  environment:
    API_VERSION: v1
    STAGE: ${opt:stage, self:provider.stage}
    VERSION: ${opt:version, '1.0'}
    COMMIT_HASH: ${opt:commitHash, 'latest'}
    DEPLOY_TIME: ${opt:deployTime, ''}
    DB_IDENTIFIER: ${opt:stage, self:provider.stage}-fitment-encrypted-${opt:salt, "local"}
    BUCKET: ${opt:stage, self:provider.stage}-fitment-import-${opt:salt, "local"}
    DATABASE_URL:
      "Fn::Join":
      - ""
      -
        - "postgres://${opt:pg-user, 'developer'}:${opt:pg-password, 'developerSuperPWD'}@"
        - "Fn::GetAtt": [DBInstance, Endpoint.Address]
        - ":"
        - "Fn::GetAtt": [DBInstance, Endpoint.Port]
        - "/fitment"
  tracing: true # enable tracing
  usagePlan: {}
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
        - "s3:*"
        - "lambda:InvokeFunction"
      Resource:
        - "*"

plugins:
  - '@hewmen/serverless-plugin-typescript'
  - serverless-offline
  - serverless-plugin-warmup
  - serverless-plugin-warmup-ts-adapter
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-openapi-documentation
  - serverless-domain-manager
  - serverless-plugin-existing-s3
  - serverless-plugin-tracing
  - serverless-plugin-aws-alerts

package:
  individually: false
  excludeDevDependencies: true
  include:
  - src/**/!(*.spec).js
  - migrations/**/*
  - mock/**/*
  - _warmup/index.js  # HACK! Typescript requires lambda handler files to be with extension *.ts.
                      # Here overriding _warmup/index.js  to the .build dir
  exclude:
  - src/**/*.ts

functions:
  up:
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    handler: src/migrations/handler.up
    timeout: 30
    environment:
      DATABASE_URL: '${self:provider.environment.DATABASE_URL}'
    warmup:
      enabled: false

  down:
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    handler: src/migrations/handler.down
    timeout: 30
    environment:
      DATABASE_URL: '${self:provider.environment.DATABASE_URL}'
    warmup:
      enabled: false
  healthStatus:
    handler: src/health/status/handler.status
    description: Test handler
    events:
    - http:
        path: ${self:provider.environment.API_VERSION}/health/status
        method: get
        cors: true
        documentation:
          summary: Returns the result of a quick health status of the API.
          description: Returns the result of a quick health status of the API.
          tags:
          - Health
          methodResponses:
          - statusCode: '200'
            description: Returned when the operation is completed successfully.
            responseModels:
              "application/json": HealthStatusResponse
  importFitments:
    handler: src/import/handler.importFitments
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    events:
    - s3:
        bucket: Import
        event: s3:ObjectCreated:*
        rules:
          - prefix: import/
    warmup:
      enabled: false
  getManufacturers:
    handler: src/fitment/handler.getManufacturers
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    events:
    - http:
        path: ${self:provider.environment.API_VERSION}/{country}/car
        method: get
        cors: true
        private: ${file(./sls/${opt:stage, self:provider.stage}.yml):endpointIsPrivate}
        documentation:
          summary: Returns the result of a quick health status of the API.
          description: Returns the result of a quick health status of the API.
          tags:
          - Health
          methodResponses:
          - statusCode: '200'
            description: Returned when the operation is completed successfully.
            responseModels:
              "application/json": HealthStatusResponse
  getCarByMake:
    handler: src/fitment/handler.getCarByMake
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    private: ${file(./sls/${opt:stage, self:provider.stage}.yml):endpointIsPrivate}
    events:
    - http:
        path: ${self:provider.environment.API_VERSION}/{country}/car/make/{make}
        method: get
        cors: true
        documentation:
          summary: Returns the result of a quick health status of the API.
          description: Returns the result of a quick health status of the API.
          tags:
          - Health
          methodResponses:
          - statusCode: '200'
            description: Returned when the operation is completed successfully.
            responseModels:
              "application/json": HealthStatusResponse
  getCarById:
    handler: src/fitment/handler.getCarById
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    private: ${file(./sls/${opt:stage, self:provider.stage}.yml):endpointIsPrivate}
    events:
    - http:
        path: ${self:provider.environment.API_VERSION}/{country}/car/{vehicleId}
        method: get
        cors: true
        documentation:
          summary: Returns the result of a quick health status of the API.
          description: Returns the result of a quick health status of the API.
          tags:
          - Health
          methodResponses:
          - statusCode: '200'
            description: Returned when the operation is completed successfully.
            responseModels:
              "application/json": HealthStatusResponse
  getCarByHsnTsn:
    handler: src/fitment/handler.getCarByHsnTsn
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    private: ${file(./sls/${opt:stage, self:provider.stage}.yml):endpointIsPrivate}
    events:
    - http:
        path: ${self:provider.environment.API_VERSION}/{country}/car/hsn/{hsn}/{tsn}
        method: get
        cors: true
        documentation:
          summary: Returns the result of a quick health status of the API.
          description: Returns the result of a quick health status of the API.
          tags:
          - Health
          methodResponses:
          - statusCode: '200'
            description: Returned when the operation is completed successfully.
            responseModels:
              "application/json": HealthStatusResponse
  getOriginalManufacturers:
    handler: src/fitment/handler.getOriginalManufacturers
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    private: ${file(./sls/${opt:stage, self:provider.stage}.yml):endpointIsPrivate}
    events:
    - http:
        path: ${self:provider.environment.API_VERSION}/{country}/car/oem
        method: get
        cors: true
        documentation:
          summary: Returns the result of a quick health status of the API.
          description: Returns the result of a quick health status of the API.
          tags:
          - Health
          methodResponses:
          - statusCode: '200'
            description: Returned when the operation is completed successfully.
            responseModels:
              "application/json": HealthStatusResponse
  getCarByOriginalEquipmentMake:
    handler: src/fitment/handler.getCarByOriginalEquipmentMake
    vpc: ${file(./sls/${opt:stage, self:provider.stage}.yml):vpc}
    private: ${file(./sls/${opt:stage, self:provider.stage}.yml):endpointIsPrivate}
    events:
    - http:
        path: ${self:provider.environment.API_VERSION}/{country}/car/oem/{make}
        method: get
        cors: true
        documentation:
          summary: Returns the result of a quick health status of the API.
          description: Returns the result of a quick health status of the API.
          tags:
          - Health
          methodResponses:
          - statusCode: '200'
            description: Returned when the operation is completed successfully.
            responseModels:
              "application/json": HealthStatusResponse
custom:
  warmup:
    cleanFolder: false
    timeout: 30
    prewarm: true
    package:
      individually: false
    enabled:
      - staging
      - prod
  customDomain: ${file(./sls/${opt:stage, self:provider.stage}.yml):customDomain}
  documentation:
    models:
    -
      name: HealthStatusResponse
      contentType: "application/json"
      schema: ${file(node_modules/lambda-core/dist/swagger.yml):models.health}

  alerts:
    stages: ${file(node_modules/lambda-core/sls/alarms.yml):stages}
    dashboards: true
    topics:
      ok: ${self:service}-${opt:stage, self:provider.stage}-alerts-ok
      alarm:
        topic: ${self:service}-${opt:stage, self:provider.stage}-alerts-alarm
        notifications: ${file(./sls/${opt:stage, self:provider.stage}.yml):alertNotifications}
    definitions: ${file(node_modules/lambda-core/sls/alarms.yml):definitions}
    function:
      - functionThrottles
      - functionLogError
      - functionErrors
      - functionDeadLetterErrors

resources:
  Resources:
    ${file(./sls/${opt:stage, self:provider.stage}.yml):Resources}
